(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{329:function(e,n,t){"use strict";t.r(n);var c=t(4),s=Object(c.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("ul",[t("li",[e._v("原文链接："),t("a",{attrs:{href:"https://medium.freecodecamp.org/var-vs-let-vs-const-in-javascript-2954ae48c037",target:"_blank",rel:"noopener noreferrer"}},[e._v("var vs let vs const in javascript"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("原文作者：Tyler McGinnis")]),e._v(" "),t("li",[e._v("译者："),t("a",{attrs:{href:"http://www.alisali.cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alisa"),t("OutboundLink")],1)])])]),e._v(" "),t("p",[e._v("在这篇文章中，你将学习两种在JavaScript（ES6）中创建变量的新方法，let和const。 在此过程中，我们将研究var，let和const之间的差异，以及函数与块级作用域，变量提升和不变性等主题。")]),e._v(" "),t("p",[e._v("如果你更喜欢观看视频的方式，可以看这个：")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.youtube.com/watch?v=6vBYfLCE9-Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("var vs let vs const: Variable declarations in ES6 | ES2015"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("ES2015（或ES6）引入了两种创建变量的新方法，let和const。但在我们真正深入研究var，let和const之间的差异之前，首先需要了解一些先决条件。 它们是变量声明与初始化，作用域（特别是函数作用域）和提升。")]),e._v(" "),t("h2",{attrs:{id:"变量声明与初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量声明与初始化"}},[e._v("#")]),e._v(" 变量声明与初始化")]),e._v(" "),t("p",[e._v("变量声明引入了新的标识符。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var declaration\n")])])]),t("p",[e._v("上面我们创建了一个名为declaration的新的标识符。在JavaScript中，变量在创建时使用"),t("code",[e._v("undefined")]),e._v("值初始化。这意味着如果我们尝试打印"),t("code",[e._v("declaration")]),e._v("变量，我们将得到undefineed。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var declaration\n\nconsole.log(declaration)\n")])])]),t("p",[e._v("所以如果我们打印declaration变量，得到undefined.")]),e._v(" "),t("p",[e._v("与变量声明相反，变量初始化是指首次为变量赋值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var declaration\n\nconsole.log(declaration) // undefined\n\ndeclaration = 'This is an initialization'\n\n")])])]),t("p",[e._v("所以这里我们通过将变量赋值为一个字符串来初始化它。")]),e._v(" "),t("p",[e._v("这引出了我们的第二个概念，作用域。")]),e._v(" "),t("h2",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[e._v("#")]),e._v(" 作用域")]),e._v(" "),t("p",[e._v("作用域定义了在你的程序中可以访问变量和函数的位置。在JavaScript中，有两种作用域 - 全局作用域和函数作用域。根据官方规范，")]),e._v(" "),t("blockquote",[t("p",[e._v("如果变量语句出现在函数声明中，那么这个变量在该函数中作为函数局部作用域被定义。")])]),e._v(" "),t("p",[e._v("这就意味着如果你使用"),t("code",[e._v("var")]),e._v("创建了一个变量，\n那么该变量的作用域为它被创建时所在的函数，并且只能在该函数或任何嵌套函数内部访问。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getDate () {\n  var date = new Date()\n  return date\n}\ngetDate()\nconsole.log(date) // ❌ Reference Error\n\n")])])]),t("p",[e._v("现在让我们看一个更高级的例子。假设我们有一个数组"),t("code",[e._v("prices")]),e._v("，并且我们需要一个函数，接受该数组以及一个"),t("code",[e._v("discount")]),e._v("作为参数，并返回一个新的折扣后的价格数组。最终目标可能如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("discountPrices([100, 200, 300], .5)\n")])])]),t("p",[e._v("并且实现可能像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  var discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  return discounted\n}\n")])])]),t("p",[e._v("看起来很简单，但这与作用域有什么关系？看一下"),t("code",[e._v("for")]),e._v("循环。在其内部声明的变量是否可以在其外部访问？事实证明，他们可以。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  var discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n")])])]),t("p",[e._v("如果JavaScript是你知道的唯一的编程语言，你可能不会想到这一点。但是，如果你从另一种编程语言（特别是一种块级作用域的编程语言）开始使用JavaScript，那么你可能会对这里发生的事情感到担忧。")]),e._v(" "),t("p",[e._v("它并没有真正破碎，它只是有点奇怪。在"),t("code",[e._v("for")]),e._v("循环之外，没有理由仍然可以访问"),t("code",[e._v("i")]),e._v("，"),t("code",[e._v("discountedPrice")]),e._v("和"),t("code",[e._v("finalPrice")]),e._v("。它对我们没有任何好处，甚至可能在某些情况下对我们造成伤害。但是，由于用"),t("code",[e._v("var")]),e._v("声明的变量是函数作用域内的，所以你可以这样做。")]),e._v(" "),t("p",[e._v("现在我们讨论了变量声明，初始化和作用域，\n那么在我们深入了解"),t("code",[e._v("let")]),e._v("和"),t("code",[e._v("const")]),e._v("之前我们需要清除的最后一件事就是变量提升。")]),e._v(" "),t("h3",{attrs:{id:"变量提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[e._v("#")]),e._v(" 变量提升")]),e._v(" "),t("p",[e._v("记得早些时候我们说过“在JavaScript中，变量在创建时用"),t("code",[e._v("undefined")]),e._v("值来初始化。”事实证明，这就是变量提升的全部内容。JavaScript解释器将在所谓的“创建”阶段为变量声明分配默认值"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("blockquote",[t("p",[e._v("有关创建阶段，变量提升和范围的更深入的指南，请参阅"),t("a",{attrs:{href:"https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("我们来看看前面的例子并且研究一下变量提升是怎么影响它的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  var discounted = undefined\n  var i = undefined\n  var discountedPrice = undefined\n  var finalPrice = undefined\n  discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    discountedPrice = prices[i] * (1 - discount)\n    finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n")])])]),t("p",[e._v("请注意，所有变量声明都分配了默认值"),t("code",[e._v("undefined")]),e._v("。这就是为什么如果你在实际声明之前尝试访问其中一个变量，你就会得到"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  console.log(discounted) // undefined\n  var discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n")])])]),t("p",[e._v("现在你已经了解了有关"),t("code",[e._v("var")]),e._v("的所有内容，让我们最后谈谈你真正关心的话题："),t("code",[e._v("var")]),e._v("，"),t("code",[e._v("let")]),e._v("和"),t("code",[e._v("const")]),e._v("之间的区别是什么？")]),e._v(" "),t("h2",{attrs:{id:"var-与-let-与-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#var-与-let-与-const"}},[e._v("#")]),e._v(" var 与 let 与 const")]),e._v(" "),t("p",[e._v("首先，我们比较一下"),t("code",[e._v("var")]),e._v("和"),t("code",[e._v("let")]),e._v("。 "),t("code",[e._v("var")]),e._v("和"),t("code",[e._v("let")]),e._v("的主要区别在于，"),t("code",[e._v("let")]),e._v("作用域是块级的，而不是函数级别的。这意味着使用"),t("code",[e._v("let")]),e._v("关键字创建的变量在创建它的“块”内以及任何嵌套块中都可用。当我说“块”时，我指的是在"),t("code",[e._v("for")]),e._v("循环或"),t("code",[e._v("if")]),e._v("语句中用花括号"),t("code",[e._v("{}")]),e._v("包围的任何东西。")]),e._v(" "),t("p",[e._v("让我们最后一次回顾我们的"),t("code",[e._v("discountPrices")]),e._v("函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  var discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n")])])]),t("p",[e._v("记住，我们能够在"),t("code",[e._v("for")]),e._v("循环之外打印"),t("code",[e._v("i")]),e._v("，"),t("code",[e._v("discountedPrice")]),e._v("和"),t("code",[e._v("finalPrice")]),e._v("，因为它们是用"),t("code",[e._v("var")]),e._v("声明的，而"),t("code",[e._v("var")]),e._v("是作用域是在函数内。但是现在，如果我们将"),t("code",[e._v("var")]),e._v("声明更改为使用"),t("code",[e._v("let")]),e._v("，并尝试运行，会发生什么？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  let discounted = []\n  for (let i = 0; i < prices.length; i++) {\n    let discountedPrice = prices[i] * (1 - discount)\n    let finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\ndiscountPrices([100, 200, 300], .5) // ❌ ReferenceError: i is not defined\n\n")])])]),t("p",[e._v("🙅 我们得到"),t("code",[e._v("ReferenceError：i is not defined")]),e._v("。这告诉我们的是，使用"),t("code",[e._v("let")]),e._v("声明的变量是作用于块级作用域的，而不是函数作用域。因此，尝试访问我们声明的“块”之外的"),t("code",[e._v("i")]),e._v("（或"),t("code",[e._v("discountedPrice")]),e._v("或"),t("code",[e._v("finalPrice")]),e._v("）会给我们一个引用错误，就像我们刚刚看到的那样。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var VS let\n\nvar: 作用域是函数范围的\n\nlet: 作用域是块级范围的\n")])])]),t("p",[e._v("下一个区别与变量提升有关。之前我们说过，变量提升的定义是“JavaScript解释器会在所谓的'创建'阶段将变量赋值为"),t("code",[e._v("undefined")]),e._v("这个默认值。”我们甚至在变量声明之前通过打印这个变量看到了这一点（你得到了"),t("code",[e._v("undefined")]),e._v("）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  console.log(discounted) // undefined\n  var discounted = []\n  for (var i = 0; i < prices.length; i++) {\n    var discountedPrice = prices[i] * (1 - discount)\n    var finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n\n")])])]),t("p",[e._v("我想不出任何你会想要在声明变量之前访问它的用例。看起来抛出一个引用错误比返回"),t("code",[e._v("undefined")]),e._v("更好。")]),e._v(" "),t("p",[e._v("实际上，这就是"),t("code",[e._v("let")]),e._v("所做的。如果你试图在被声明之前去访问一个用"),t("code",[e._v("let")]),e._v("声明的变量，你会得到一个引用错误，而不是"),t("code",[e._v("undefined")]),e._v("。（比如使用var声明的那些变量）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function discountPrices (prices, discount) {\n  console.log(discounted) // ❌ ReferenceError\n  let discounted = []\n  for (let i = 0; i < prices.length; i++) {\n    let discountedPrice = prices[i] * (1 - discount)\n    let finalPrice = Math.round(discountedPrice * 100) / 100\n    discounted.push(finalPrice)\n  }\n  console.log(i) // 3\n  console.log(discountedPrice) // 150\n  console.log(finalPrice) // 150\n  return discounted\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var 与 let\n\nvar:\n  函数范围的\n  在变量声明之前使用时得到undefined\n\nlet:\n  作用范围是块级的\n  在变量声明之前使用时报引用错误\n\n")])])]),t("h2",{attrs:{id:"let与const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let与const"}},[e._v("#")]),e._v(" let与const")]),e._v(" "),t("p",[e._v("既然你理解了"),t("code",[e._v("var")]),e._v("和"),t("code",[e._v("let")]),e._v("之间的区别，那么"),t("code",[e._v("const")]),e._v("呢？事实证明，"),t("code",[e._v("const")]),e._v("与"),t("code",[e._v("let")]),e._v("几乎完全相同。但是，唯一的区别是，一旦使用"),t("code",[e._v("const")]),e._v("为变量赋值，就无法将其重新赋值给新值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let name = 'Tyler'\nconst handle = 'tylermcginnis'\nname = 'Tyler McGinnis' // ✅\nhandle = '@tylermcginnis' // ❌ TypeError: Assignment to constant variable.\n")])])]),t("p",[e._v("上面的内容是用"),t("code",[e._v("let")]),e._v("声明的变量可以重新赋值，但用"),t("code",[e._v("const")]),e._v("声明的变量不能。")]),e._v(" "),t("p",[e._v("很酷，所以只要你想让一个变量是不可变的，你可以用const声明它。嗯，也不完全是这样。因为用"),t("code",[e._v("const")]),e._v("声明变量并不意味着它是不可变的。它意味着不能重新赋值。这是一个很好的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const person = {\n  name: 'Kim Kardashian'\n}\nperson.name = 'Kim Kardashian West' // ✅\nperson = {} // ❌ Assignment to constant variable.\n")])])]),t("p",[e._v("请注意，更改对象上的属性并不是重新赋值，因此即使使用"),t("code",[e._v("const")]),e._v("声明对象，也不意味着你不能改变其任何属性。它只表示您无法将其重新分配给新值。")]),e._v(" "),t("p",[e._v("现在我们还没有回答的最重要的问题是：你应该使用"),t("code",[e._v("var")]),e._v("，"),t("code",[e._v("let")]),e._v("还是"),t("code",[e._v("const")]),e._v("？ 最流行的观点和我赞同的观点是，除非你知道变量会发生变化，否则你应该总是使用"),t("code",[e._v("const")]),e._v("。 这样做的原因是使用"),t("code",[e._v("const")]),e._v("，你向未来的自己以及任何其他未来的开发人员发出信号，这些开发人员必须阅读你的代码，这个变量不应该改变。如果它需要更改（比如在"),t("code",[e._v("for")]),e._v("循环中），你应该使用"),t("code",[e._v("let")]),e._v("。")]),e._v(" "),t("p",[e._v("因此，在变化的变量和不变的变量之间，没有多少剩余。这意味着你不应该再使用"),t("code",[e._v("var")]),e._v("。")]),e._v(" "),t("p",[e._v("现在不受欢迎的观点，虽然它仍然有一些有效性，是你永远不应该使用"),t("code",[e._v("const")]),e._v("，因为即使你试图表明变量是不可变的，正如我们上面所看到的那样，情况并非完全如此。赞成此意见的开发人员总是使用"),t("code",[e._v("let")]),e._v("，除非他们的变量实际上是常量，如"),t("code",[e._v("_LOCATION_ = ...")]),e._v(".")]),e._v(" "),t("p",[e._v("所以回顾一下，"),t("code",[e._v("var")]),e._v("是作用于函数范围的，如果你尝试在实际声明之前使用一个用"),t("code",[e._v("var")]),e._v("声明的变量，你就会得到"),t("code",[e._v("undefined")]),e._v("。"),t("code",[e._v("const")]),e._v("和"),t("code",[e._v("let")]),e._v("是作用于块级范围的，如果你尝试在声明之前使用"),t("code",[e._v("let")]),e._v("或"),t("code",[e._v("const")]),e._v("声明的变量，你会得到一个引用错误。最后，"),t("code",[e._v("let")]),e._v("和"),t("code",[e._v("const")]),e._v("之间的区别在于，一旦你为"),t("code",[e._v("const")]),e._v("赋值，你就不能重新为它赋值，但是你可以使用"),t("code",[e._v("let")]),e._v("来做到重新赋值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var 与 let 与 const\n\nvar:\n  函数范围的\n  在变量声明之前使用时会得到undefined\n\nlet:\n  作用范围是块级的\n  在变量声明之前使用时会报引用错误\n\nconst:\n  作用范围是块级的\n  在变量声明之前使用时会报引用错误\n  不能重新赋值\n")])])]),t("p",[e._v("这篇文章最初发布于"),t("a",{attrs:{href:"https://tylermcginnis.com/var-let-const/",target:"_blank",rel:"noopener noreferrer"}},[e._v("tylermcginnis.com"),t("OutboundLink")],1),e._v("，是其 "),t("a",{attrs:{href:"https://tylermcginnis.com/courses/modern-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Modern JavaScript"),t("OutboundLink")],1),e._v("课程的一部分。")])])}),[],!1,null,null,null);n.default=s.exports}}]);